name: 编译harbor-arm

on:
  workflow_dispatch:
    inputs:
      harbor_version:
        description: '请填写harbor的版本'
        required: true
        default: 'v2.12.2'  # 设置默认的 harbor 版本

jobs:
  pull_and_package:
    runs-on: ubuntu-24.04-arm

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: 查看基础环境
      run: |
        docker version
        docker-compose version 2>/dev/null || curl -o docker-compose https://github.com/docker/compose/releases/download/v2.33.1/docker-compose-linux-aarch64 && chmod +x docker-compose && export PATH=${PATH}:${{ github.workspace }}
        docker-compose version
        python -V
        git --version
        make --version
        go version

    - name: 获取harbor源码
      run: |
        git clone --branch ${{ github.event.inputs.harbor_version }} https://github.com/goharbor/harbor.git

    - name: 编译harbor
      run: |
        cd harbor
        sed -i 's/amd64/arm64/g' tools/swagger/Dockerfile
        sed -i 's/x86_64/arm64/g' tools/mockery/Dockerfile
        # 增加配置，否则redis无法启动
        echo "ignore-warnings ARM64-COW-BUG" >> make/photon/redis/redis.conf
        # 使用官方redis镜像，这里使用Ubuntu构建的redis会因为arm架构pagesize不同，无法在麒麟V10服务器上使用
        echo "FROM redis:7.2.6" > make/photon/redis/Dockerfile.base
        make package_offline NOTARYFLAG=true CHARTFLAG=true TRIVYFLAG=true PULL_BASE_FROM_DOCKERHUB=false PKGVERSIONTAG=${{ github.event.inputs.harbor_version }} VERSIONTAG=${{ github.event.inputs.harbor_version }}
        ls

    - name: List generated files (debug step)
      run: |
        echo "Preparing docker images list (.tar.gz) files:"
        find $GITHUB_WORKSPACE -name "kubeadm"
        release_name=$(TZ="Asia/Shanghai" date +'%Y-%m-%d %H:%M Build')
        echo "RELEASE_NAME=$release_name" >> $GITHUB_ENV

    - name: Create GitHub Release
      uses: softprops/action-gh-release@master
      with:
        tag_name: harbor-arm
        name: harbor-arm
        body: |
          ```shell
          # 上传到服务器并解压
          tar -xf harbor-offline-installer-${{ github.event.inputs.harbor_version }}.tgz
          
          # 修改配置
          cd harbor
          cp harbor.yml.tmpl harbor.yml
          vi harbor.yml
          # 修改host
          hostname: xx.xx.xx.xx
          # 注掉如下部分，内网使用http协议就行
          # https related config
          # https:
            # https port for harbor, default is 443
            # port: 443
            # The path of cert and key files for nginx
            # certificate: /your/certificate/path
            # private_key: /your/private/key/path
          # 修改存储路径
          data_volume: /home/harbor-data
          
          # 安装
          docker load -i harbor.${{ github.event.inputs.harbor_version }}.tar.gz
          ./prepare
          chmod -R 777 common
          ./install.sh
          ```
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload Docker images as release assets
      uses: softprops/action-gh-release@v2.1.0
      with:
        tag_name: harbor-arm
        files: ${{ github.workspace }}/harbor/harbor-offline-installer-${{ github.event.inputs.harbor_version }}.tgz
        token: ${{ secrets.GITHUB_TOKEN }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
